require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/games", type: :request do

  describe "POST /index" do
    it "renders a JSON response with the new game" do
        post "/api/v1/games",
             params: {:board => [" ", " ", " ", " ", " ", " ", " ", " ", " "]}, as: :json

        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
        response_body = JSON.parse(response.body, symbolize_names: true)
        expect(response_body).to eq({:win => false, :token => "X", :draw => false, :winner => nil })
    end

    it "renders Token O in response if there is more Xs than Os" do
        post "/api/v1/games",
             params: {:board => ["X", "O", "X", "O", "X", " ", " ", " ", " "]}, as: :json

        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
        response_body = JSON.parse(response.body, symbolize_names: true)
        expect(response_body).to eq({:win => false, :token => "O", :draw => false, :winner => nil })
    end

    it "renders true in response for tie is the board is full and there is no winner" do
        post "/api/v1/games",
             params: {:board => ["X", "O", "X", "O", "X", "X", "O", "X", "O"]}, as: :json

        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
        response_body = JSON.parse(response.body, symbolize_names: true)
        expect(response_body).to eq({:win => false, :token => "O", :draw => true, :winner => nil })
    end

    it "renders true in response for win from X and winner is the X token" do
        post "/api/v1/games",
             params: {:board => [" ", "O", "X", "O", "X", "X", "X", "O", " "]}, as: :json
             
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
        response_body = JSON.parse(response.body, symbolize_names: true)
        expect(response_body).to eq({:win => true, :token => "O", :draw => false, :winner => "X" })
    end
  end
end
